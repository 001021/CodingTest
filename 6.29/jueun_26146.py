# 이 문제는 그래프의 연결 여부를 확인하는 문제로 해석할 수 있습니다.
#
# 우선 입력으로 주어진 정보를 바탕으로 그래프를 구성해야 합니다. 항공편의 정보를 이용하여 각 나라를 노드로, 항공편을 간선으로 나타내는 방식으로 그래프를 만들 수 있습니다.
#
# 만약 주어진 그래프가 연결 그래프라면, 즉 모든 나라를 방문하는 경로가 존재한다면 "Yes"를 출력해야 합니다. 연결 그래프인지 여부를 판단하기 위해 그래프 탐색 알고리즘을 사용할 수 있습니다. 너비 우선 탐색(BFS)이나 깊이 우선 탐색(DFS)을 이용하여 그래프를 탐색하면서 모든 노드를 방문하는지 확인할 수 있습니다.
#
# 하지만 이 문제의 입력 크기는 최대 200,000으로 매우 큽니다. 그래프 탐색을 사용하여 모든 노드를 방문하는 것은 시간 초과로 이어질 수 있습니다. 따라서 조금 다른 접근 방식이 필요합니다.
#
# 이 문제는 유니온-파인드(Union-Find) 알고리즘을 사용하여 해결할 수 있습니다. 유니온-파인드 알고리즘은 집합을 표현하고 조작하는 알고리즘으로, 연결된 노드들을 하나의 집합으로 표현하고 두 집합을 합치거나 같은 집합에 속해있는지 확인하는 연산을 수행할 수 있습니다.
#
# 모든 나라를 하나의 집합으로 초기화한 뒤, 항공편의 정보를 이용하여 두 나라를 같은 집합으로 합치는 연산을 수행합니다. 이때, 합치기 연산을 수행하기 전에 두 나라가 이미 같은 집합에 속해있는지 확인해야 합니다. 만약 이미 같은 집합에 속해있다면 합치지 않고 다음 항공편으로 넘어갑니다.
#
# 모든 항공편에 대해 위 연산을 수행한 후에는 모든 나라들이 하나의 집합에 속해있는지 확인하면 됩니다. 만약 모든 나라가 같은 집합에 속해있다면 "Yes"를 출력하고, 그렇지 않다면 "No"를 출력하면 됩니다.
#
# 이를 통해 주어진 문제를 해결할 수 있습니다. 유니온-파인드 알고리즘을 이용하여 연결 여부를 확인하는 방법을 적용해보세요.